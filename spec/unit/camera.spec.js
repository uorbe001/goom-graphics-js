var Mathematics = require("goom-math-js"), Camera = require("../../src/camera");

describe("Graphics.Camera", function() {
	beforeEach(function() {
		var viewportWidth = 500, viewportHeight = 500;
		this.camera = new Camera(viewportWidth, viewportHeight);
	});

	it ("should create the camera with perspective projection by default", function() {
		proj = new Mathematics.Matrix4D();
		proj.makePerspective(60, 1.0, 4096.0, 500/500);
		expect(this.camera.projection.data[0]).toBe(proj.data[0]);
		expect(this.camera.projection.data[1]).toBe(proj.data[1]);
		expect(this.camera.projection.data[2]).toBe(proj.data[2]);
		expect(this.camera.projection.data[3]).toBe(proj.data[3]);
		expect(this.camera.projection.data[4]).toBe(proj.data[4]);
		expect(this.camera.projection.data[5]).toBe(proj.data[5]);
		expect(this.camera.projection.data[6]).toBe(proj.data[6]);
		expect(this.camera.projection.data[7]).toBe(proj.data[7]);
		expect(this.camera.projection.data[8]).toBe(proj.data[8]);
		expect(this.camera.projection.data[9]).toBe(proj.data[9]);
		expect(this.camera.projection.data[10]).toBe(proj.data[10]);
		expect(this.camera.projection.data[11]).toBe(proj.data[11]);
		expect(this.camera.projection.data[12]).toBe(proj.data[12]);
		expect(this.camera.projection.data[13]).toBe(proj.data[13]);
		expect(this.camera.projection.data[14]).toBe(proj.data[14]);
		expect(this.camera.projection.data[15]).toBe(proj.data[15]);
	});

	it ("should set the projection to orthographic projection when asked to do so", function() {
		proj = new Mathematics.Matrix4D();
		proj.makeOrthographic(0, 500, 0, 500, 1, 4096.0);
		this.camera.setOrthographicProjection(true);
		expect(this.camera.projection.data[0]).toBe(proj.data[0]);
		expect(this.camera.projection.data[1]).toBe(proj.data[1]);
		expect(this.camera.projection.data[2]).toBe(proj.data[2]);
		expect(this.camera.projection.data[3]).toBe(proj.data[3]);
		expect(this.camera.projection.data[4]).toBe(proj.data[4]);
		expect(this.camera.projection.data[5]).toBe(proj.data[5]);
		expect(this.camera.projection.data[6]).toBe(proj.data[6]);
		expect(this.camera.projection.data[7]).toBe(proj.data[7]);
		expect(this.camera.projection.data[8]).toBe(proj.data[8]);
		expect(this.camera.projection.data[9]).toBe(proj.data[9]);
		expect(this.camera.projection.data[10]).toBe(proj.data[10]);
		expect(this.camera.projection.data[11]).toBe(proj.data[11]);
		expect(this.camera.projection.data[12]).toBe(proj.data[12]);
		expect(this.camera.projection.data[13]).toBe(proj.data[13]);
		expect(this.camera.projection.data[14]).toBe(proj.data[14]);
		expect(this.camera.projection.data[15]).toBe(proj.data[15]);
	});

	it ("should update the projection matrix when far/near or angle are set", function() {
		proj = new Mathematics.Matrix4D();
		proj.makePerspective(50, 1.0, 4096.0, 500/500);
		this.camera.setViewAngle(50);
		expect(this.camera.projection.data[0]).toBe(proj.data[0]);
		expect(this.camera.projection.data[1]).toBe(proj.data[1]);
		expect(this.camera.projection.data[2]).toBe(proj.data[2]);
		expect(this.camera.projection.data[3]).toBe(proj.data[3]);
		expect(this.camera.projection.data[4]).toBe(proj.data[4]);
		expect(this.camera.projection.data[5]).toBe(proj.data[5]);
		expect(this.camera.projection.data[6]).toBe(proj.data[6]);
		expect(this.camera.projection.data[7]).toBe(proj.data[7]);
		expect(this.camera.projection.data[8]).toBe(proj.data[8]);
		expect(this.camera.projection.data[9]).toBe(proj.data[9]);
		expect(this.camera.projection.data[10]).toBe(proj.data[10]);
		expect(this.camera.projection.data[11]).toBe(proj.data[11]);
		expect(this.camera.projection.data[12]).toBe(proj.data[12]);
		expect(this.camera.projection.data[13]).toBe(proj.data[13]);
		expect(this.camera.projection.data[14]).toBe(proj.data[14]);
		expect(this.camera.projection.data[15]).toBe(proj.data[15]);

		proj.makePerspective(50, 1.0, 100, 500/500);
		this.camera.setFarLimit(100);
		expect(this.camera.projection.data[0]).toBe(proj.data[0]);
		expect(this.camera.projection.data[1]).toBe(proj.data[1]);
		expect(this.camera.projection.data[2]).toBe(proj.data[2]);
		expect(this.camera.projection.data[3]).toBe(proj.data[3]);
		expect(this.camera.projection.data[4]).toBe(proj.data[4]);
		expect(this.camera.projection.data[5]).toBe(proj.data[5]);
		expect(this.camera.projection.data[6]).toBe(proj.data[6]);
		expect(this.camera.projection.data[7]).toBe(proj.data[7]);
		expect(this.camera.projection.data[8]).toBe(proj.data[8]);
		expect(this.camera.projection.data[9]).toBe(proj.data[9]);
		expect(this.camera.projection.data[10]).toBe(proj.data[10]);
		expect(this.camera.projection.data[11]).toBe(proj.data[11]);
		expect(this.camera.projection.data[12]).toBe(proj.data[12]);
		expect(this.camera.projection.data[13]).toBe(proj.data[13]);
		expect(this.camera.projection.data[14]).toBe(proj.data[14]);
		expect(this.camera.projection.data[15]).toBe(proj.data[15]);

		proj.makePerspective(50, 2, 100, 500/500);
		this.camera.setNearLimit(2);
		expect(this.camera.projection.data[0]).toBe(proj.data[0]);
		expect(this.camera.projection.data[1]).toBe(proj.data[1]);
		expect(this.camera.projection.data[2]).toBe(proj.data[2]);
		expect(this.camera.projection.data[3]).toBe(proj.data[3]);
		expect(this.camera.projection.data[4]).toBe(proj.data[4]);
		expect(this.camera.projection.data[5]).toBe(proj.data[5]);
		expect(this.camera.projection.data[6]).toBe(proj.data[6]);
		expect(this.camera.projection.data[7]).toBe(proj.data[7]);
		expect(this.camera.projection.data[8]).toBe(proj.data[8]);
		expect(this.camera.projection.data[9]).toBe(proj.data[9]);
		expect(this.camera.projection.data[10]).toBe(proj.data[10]);
		expect(this.camera.projection.data[11]).toBe(proj.data[11]);
		expect(this.camera.projection.data[12]).toBe(proj.data[12]);
		expect(this.camera.projection.data[13]).toBe(proj.data[13]);
		expect(this.camera.projection.data[14]).toBe(proj.data[14]);
		expect(this.camera.projection.data[15]).toBe(proj.data[15]);
	});

	it ("should create the view matrix with default data", function() {
		var view = new Mathematics.Matrix4D();
		view.makeTranslation(0, 0, -75);
		expect(Math.abs(this.camera.view.data[0])).toBe(view.data[0]);
		expect(this.camera.view.data[1]).toBe(view.data[1]);
		expect(this.camera.view.data[2]).toBe(view.data[2]);
		expect(this.camera.view.data[3]).toBe(view.data[3]);
		expect(this.camera.view.data[4]).toBe(view.data[4]);
		expect(this.camera.view.data[5]).toBe(view.data[5]);
		expect(this.camera.view.data[6]).toBe(view.data[6]);
		expect(this.camera.view.data[7]).toBe(view.data[7]);
		expect(this.camera.view.data[8]).toBe(view.data[8]);
		expect(this.camera.view.data[9]).toBe(view.data[9]);
		expect(Math.abs(this.camera.view.data[10])).toBe(view.data[10]);
		expect(this.camera.view.data[11]).toBe(view.data[11]);
		expect(this.camera.view.data[12]).toBe(view.data[12]);
		expect(this.camera.view.data[13]).toBe(view.data[13]);
		expect(this.camera.view.data[14]).toBe(view.data[14]);
		expect(this.camera.view.data[15]).toBe(view.data[15]);
	});

	it ("should recalculate the view matrix when the camera position, target position or up vector", function() {
		var view = new Mathematics.Matrix4D();
		view.makeLookAt(new Mathematics.Vector3D(0, 0, -75), new Mathematics.Vector3D(0, 0, 0), Mathematics.Vector3D.UP);
		this.camera.setTarget(new Mathematics.Vector3D(0,0,0));
		expect(this.camera.view.data[0]).toBe(view.data[0]);
		expect(this.camera.view.data[1]).toBe(view.data[1]);
		expect(this.camera.view.data[2]).toBe(view.data[2]);
		expect(this.camera.view.data[3]).toBe(view.data[3]);
		expect(this.camera.view.data[4]).toBe(view.data[4]);
		expect(this.camera.view.data[5]).toBe(view.data[5]);
		expect(this.camera.view.data[6]).toBe(view.data[6]);
		expect(this.camera.view.data[7]).toBe(view.data[7]);
		expect(this.camera.view.data[8]).toBe(view.data[8]);
		expect(this.camera.view.data[9]).toBe(view.data[9]);
		expect(this.camera.view.data[10]).toBe(view.data[10]);
		expect(this.camera.view.data[11]).toBe(view.data[11]);
		expect(this.camera.view.data[12]).toBe(view.data[12]);
		expect(this.camera.view.data[13]).toBe(view.data[13]);
		expect(this.camera.view.data[14]).toBe(view.data[14]);
		expect(this.camera.view.data[15]).toBe(view.data[15]);

		view.makeLookAt(new Mathematics.Vector3D(0, 0, -160), new Mathematics.Vector3D(0, 0, 0), Mathematics.Vector3D.UP);
		this.camera.setPosition(new Mathematics.Vector3D(0,0,-160));
		expect(this.camera.view.data[0]).toBe(view.data[0]);
		expect(this.camera.view.data[1]).toBe(view.data[1]);
		expect(this.camera.view.data[2]).toBe(view.data[2]);
		expect(this.camera.view.data[3]).toBe(view.data[3]);
		expect(this.camera.view.data[4]).toBe(view.data[4]);
		expect(this.camera.view.data[5]).toBe(view.data[5]);
		expect(this.camera.view.data[6]).toBe(view.data[6]);
		expect(this.camera.view.data[7]).toBe(view.data[7]);
		expect(this.camera.view.data[8]).toBe(view.data[8]);
		expect(this.camera.view.data[9]).toBe(view.data[9]);
		expect(this.camera.view.data[10]).toBe(view.data[10]);
		expect(this.camera.view.data[11]).toBe(view.data[11]);
		expect(this.camera.view.data[12]).toBe(view.data[12]);
		expect(this.camera.view.data[13]).toBe(view.data[13]);
		expect(this.camera.view.data[14]).toBe(view.data[14]);
		expect(this.camera.view.data[15]).toBe(view.data[15]);

		view.makeLookAt(new Mathematics.Vector3D(0, 0, -160), new Mathematics.Vector3D(0, 0, 0), Mathematics.Vector3D.DOWN);
		this.camera.setUpVector(Mathematics.Vector3D.DOWN);
		expect(this.camera.view.data[0]).toBe(view.data[0]);
		expect(this.camera.view.data[1]).toBe(view.data[1]);
		expect(this.camera.view.data[2]).toBe(view.data[2]);
		expect(this.camera.view.data[3]).toBe(view.data[3]);
		expect(this.camera.view.data[4]).toBe(view.data[4]);
		expect(this.camera.view.data[5]).toBe(view.data[5]);
		expect(this.camera.view.data[6]).toBe(view.data[6]);
		expect(this.camera.view.data[7]).toBe(view.data[7]);
		expect(this.camera.view.data[8]).toBe(view.data[8]);
		expect(this.camera.view.data[9]).toBe(view.data[9]);
		expect(this.camera.view.data[10]).toBe(view.data[10]);
		expect(this.camera.view.data[11]).toBe(view.data[11]);
		expect(this.camera.view.data[12]).toBe(view.data[12]);
		expect(this.camera.view.data[13]).toBe(view.data[13]);
		expect(this.camera.view.data[14]).toBe(view.data[14]);
		expect(this.camera.view.data[15]).toBe(view.data[15]);
	});
});